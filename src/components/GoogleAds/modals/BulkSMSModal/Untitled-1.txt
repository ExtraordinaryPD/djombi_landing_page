useEffect(() => {
    // Fetch emails from localStorage or your API when component mounts
    const fetchEmails = async () => {
      try {
        // Option 1: Fetch from localStorage
        const savedEmails = JSON.parse(localStorage.getItem('sentEmails') || '[]');
        if (savedEmails.length > 0) {
          // Initialize your emails state with the saved emails
          setEmails(savedEmails); // Use your actual state setter function
        }

        // Option 2: Or fetch from your API
        // const response = await fetch('/api/emails');
        // const data = await response.json();
        // setEmails(data.emails);
      } catch (error) {
        console.error('Failed to fetch emails:', error);
      }
    };

    fetchEmails();
  }, []);


  // Function for Send Email
  const handleSend = async () => {

    // Get the linked email ID from storage
    const emailId = localStorage.getItem('linkedEmailId');

    // More comprehensive validation
    if (!email.to.trim()) {
      setError("Recipient email is required");
      return;
    }

    if (!email.subject.trim()) {
      setError("Subject is required");
      return;
    }

    if (!email.content.trim()) {
      setError("Email content cannot be empty");
      return;
    }

    // Email format validation (basic)
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email.to.trim())) {
      setError("Please enter a valid email address");
      return;
    }

    if (!emailId) {
      // Handle the case where no email has been linked
      alert('Please link an email account first');
      return;
    }

    setLoading(true);
    setError("");

    try {
      // Create a structured request object
      const emailData = {
        to: email.to.trim(),
        cc: undefined,
        bcc: undefined,
        subject: email.subject.trim(),
        body: email.content.trim(),
        signature: undefined,
        email_id: emailId,
      };


      // Send the email
      const response = await sendEmail(emailData);

      // console.log("API Response:", response);

      // Only add to local state if the API call succeeded
      const newEmail: Email = {
        from: "danielodedara@gmail.com",
        to: email.to,
        subject: email.subject,
        content: email.content,
        hasAttachment: false,
        status: "sent",
      };

      // This assumes your API returns the saved email in response.data.email
      addEmail(newEmail);

      // Save to localStorage for persistence between refreshes
      const savedEmails = JSON.parse(localStorage.getItem('sentEmails') || '[]');
      savedEmails.push(newEmail);
      localStorage.setItem('sentEmails', JSON.stringify(savedEmails));

      // Clear draft if it exists
      updateDraft(null);

      // Reset form and close modal
      setEmail({ to: "", subject: "", content: "" });
      onClose();
    } catch (error: any) {
      console.error("Error in handleSend:", error);

      // More descriptive error message
      if (error.message.includes("401") || error.message.includes("auth")) {
        setError("Authentication failed. Your session may have expired.");
      } else if (error.message.includes("429")) {
        setError("Too many requests. Please try again later.");
      } else {
        setError(error.message || "Failed to send email. Please try again.");
      }
    } finally {
      setLoading(false);
    }
  };